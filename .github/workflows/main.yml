# Automatically build binary wheels and source packages.
name: cibuildwheel

# Build on every branch push, tag push, and pull request change.
on: [push, pull_request]

env:
  CIBW_BUILD: "cp36-* cp37-* cp38-* cp39-* cp310-* pp37-*"

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    env:
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      CIBW_MANYLINUX_I686_IMAGE: manylinux2014
      CIBW_ARCHS_MACOS: "x86_64 arm64"

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Run test
        run: |
          python setup.py install
          python tests/test_zstd.py

      - name: Install cibuildwheel & build wheels
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/release')
        run: |
          python -m pip install -U cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload wheels
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/release')
        uses: actions/upload-artifact@v2
        with:
          name: pyzstd-files
          path: wheelhouse/*.whl

  # Build source distribution & manylinux1_x86_64
  build_in_manylinux2010:
    name: Build in manylinux2010 environment
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/release')
    runs-on: ubuntu-latest

    env:
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2010
      CIBW_ARCHS_LINUX: x86_64
      CIBW_SKIP: pp*

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Build source distribution & wheels
        run: |
          python setup.py sdist --formats=gztar
          python -m pip install -U cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload source distribution
        uses: actions/upload-artifact@v2
        with:
          name: pyzstd-files
          path: dist/*.tar.gz

      - name: Upload manylinux1_x86_64
        uses: actions/upload-artifact@v2
        with:
          name: pyzstd-files
          path: wheelhouse/*.whl

  # Build aarch64/ppc64le/s390x wheels
  build_arch_wheels:
    name: Build ${{ matrix.arch }} wheels
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/release')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [aarch64, ppc64le, s390x]

    env:
      CIBW_ARCHS: ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Install cibuildwheel & build wheels
        run: |
          python -m pip install -U cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload ${{ matrix.arch }} wheels
        uses: actions/upload-artifact@v2
        with:
          name: pyzstd-files
          path: wheelhouse/*.whl

  # Run test on PyPy
  test_on_pypy:
    name: Test on ${{ matrix.py }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        py: ['pypy-3.6', 'pypy-3.7']

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py }}

      - name: Build & test
        run: |
          sudo apt-get install -q -y zstd libzstd1 libzstd-dev
          python setup.py --dynamic-link-zstd install
          python tests/test_zstd.py

  # Run test on armv7/aarch64/ppc64le/s390x
  test_on_arches:
    name: Test on ${{ matrix.distro }} ${{ matrix.arch }}
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/release')
    # The host should always be Linux
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        arch: [armv7, aarch64, ppc64le, s390x]
        distro: [ubuntu20.04]

    steps:
      - uses: actions/checkout@v2

      - uses: uraimo/run-on-arch-action@v2.0.9
        name: Build & run test
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          install: |
            apt-get update -q -y
            apt-get install -q -y python3 python3-pip build-essential gcc

          run: |
            python3 -c "import platform;print('Machine type:', platform.machine())"
            python3 -m pip install -U setuptools
            python3 setup.py install
            python3 tests/test_zstd.py

  # Upload to PyPI
  upload_pypi:
    name: Publish to PyPI
    needs: [build_wheels, build_in_manylinux2010, build_arch_wheels,
            test_on_pypy, test_on_arches]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: pyzstd-files
          path: dist

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip_existing: true
          verbose: true

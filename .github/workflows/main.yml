# Automatically build binary wheels and source packages.
name: cibuildwheel

# Build on every branch push, tag push, and pull request change.
on: [push, pull_request]

env:
  PYTHON_VER: '3.10'
  CIBW_BUILD: cp36-* cp37-* cp38-* cp39-* cp310-* cp311-* pp37-* pp38-* pp39-*
  CIBW_TEST_COMMAND: python {project}/tests/test_zstd.py

jobs:
  # Run test on Ubuntu/macOS/Windows for every commit
  run_test:
    name: Test on ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VER }}

      - name: Run test
        run: |
          python setup.py install --warning-as-error
          python tests/test_zstd.py

  # Run test on PyPy for every commit
  test_on_pypy:
    name: Test on ${{ matrix.py }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        py: ['pypy-3.7', 'pypy-3.8', 'pypy-3.9']

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py }}

      - name: Build & test
        run: |
          sudo apt-get install -q -y zstd libzstd1 libzstd-dev
          python setup.py --dynamic-link-zstd install
          python tests/test_zstd.py

  # Build Linux/macOS/Windows wheels
  build_wheels:
    name: Build wheels on ${{ matrix.platform }}
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/release')
    runs-on: ${{ matrix.platform }}

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    env:
      # macOS archs
      CIBW_ARCHS_MACOS: "x86_64 arm64"

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VER }}

      - name: Install cibuildwheel & build wheels
        run: |
          python -m pip install -U cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: pyzstd-files
          path: wheelhouse/*.whl

  # Build source distribution & manylinux1_x86_64 wheels
  build_in_manylinux2010:
    name: Build in manylinux2010 environment
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/release')
    runs-on: ubuntu-latest

    env:
      # generate manylinux1_x86_64 wheels
      CIBW_BUILD: cp36-* cp37-* cp38-* cp39-* cp310-* pp37-* pp38-*
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2010
      CIBW_MANYLINUX_PYPY_X86_64_IMAGE: manylinux2010
      CIBW_ARCHS_LINUX: x86_64

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VER }}

      - name: Build source distribution & wheels
        run: |
          python setup.py sdist --formats=gztar
          python -m pip install -U cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload source distribution
        uses: actions/upload-artifact@v2
        with:
          name: pyzstd-files
          path: dist/*.tar.gz

      - name: Upload manylinux1_x86_64
        uses: actions/upload-artifact@v2
        with:
          name: pyzstd-files
          path: wheelhouse/*.whl

  # Build aarch64/ppc64le/s390x wheels
  build_arch_wheels:
    name: Build ${{ matrix.arch }} wheels
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/release')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [aarch64, ppc64le, s390x]
        skip_image: ["*musllinux*", "*manylinux*"]

    env:
      CIBW_ARCHS: ${{ matrix.arch }}
      CIBW_SKIP:  ${{ matrix.skip_image }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VER }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Install cibuildwheel & build wheels
        run: |
          python -m pip install -U cibuildwheel
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload ${{ matrix.arch }} wheels
        uses: actions/upload-artifact@v2
        with:
          name: pyzstd-files
          path: wheelhouse/*.whl

  # If the head commit message contains '<more-tests>', run test on
  # armv6/armv7/aarch64/ppc64le/s390x architectures.
  test_on_arches:
    name: Test on ${{ matrix.distro }} ${{ matrix.arch }}
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '<more-tests>')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [armv6, armv7, aarch64, ppc64le, s390x]
        distro: [bullseye]  # Debian 11

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: uraimo/run-on-arch-action@v2.2.0
        name: Build & run test
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          install: |
            apt-get update -q -y
            apt-get install -q -y python3 python3-dev python3-pip build-essential gcc

          run: |
            python3 -c "import platform;print('Machine type:', platform.machine())"
            python3 setup.py install --warning-as-error
            python3 tests/test_zstd.py

  # If the head commit message contains '<more-tests>', test on
  # minimum version of CPython.
  test_on_minimum_cpython:
    name: Test on minimum version of CPython
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '<more-tests>')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.5'

      - name: Run test
        run: |
          python setup.py install --warning-as-error
          python tests/test_zstd.py

  # Upload to PyPI
  upload_pypi:
    name: Publish to PyPI
    needs: [build_wheels, build_in_manylinux2010, build_arch_wheels]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: pyzstd-files
          path: dist

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip_existing: true
          verbose: true
          print_hash: true

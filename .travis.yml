# In this configuration, the package is tested against multiple versions of python
# on Linux and on one version of Python on Windows. If and only if all tests pass
# will the wheels be built and deployed. Further, deployment is only initiated if
# the current branch is "master", the current commit is tagged, and the current
# repo is yours (e.g. it won't run on a Pull Request). For convenience, a source
# distribution is also created.

os: linux
language: python
python:
  - 3.7
  - 3.8

branches:
  only:
    - master
    - dev

stages:
  - name: build
  - name: deploy

env:
  global:
    - TWINE_USERNAME=__token__
    # Note: TWINE_PASSWORD is set to a PyPI API token in Travis settings
    #- CIBW_TEST_COMMAND: "'python {project}/test/polyscope_test.py backend=openGL_mock'"
    - CIBW_BUILD="cp37-* cp38-*"

script:
  - python3 setup.py install
  - python3 build_tools/test_zstd.py

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" = windows ]]; then
        choco install python --version 3.8.0
        export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
        # make sure it's on PATH as 'python'
        ln -s /c/Python38/python.exe /c/Python38/python3.exe
    fi
jobs:
  include:

    # Build source distribution
    - stage: build  
      name: Build source distribution
      os: linux
      language: python
      python: 3.7
      install: skip
      # if the build has a tag, it must match setup.py
      before_script: |
        [[ "$TRAVIS_TAG" ==  "" ]] || [[ "$TRAVIS_TAG" == "v$(python setup.py --version)" ]]
      script:
        - python3 -m pip install setuptools
        - python3 setup.py sdist --formats=gztar
        
    # Build on linux
    - stage: build 
      name: Build Linux wheels
      os: linux
      language: python
      python: 3.7
      services: docker
      install: python3 -m pip install cibuildwheel==1.6.1
      script: python3 -m cibuildwheel --output-dir wheelhouse
        
    # Build on mac
    - stage: build 
      name: Build macOS wheels
      os: osx
      osx_image: xcode11.2  
      language: shell       
      install: python3 -m pip install cibuildwheel==1.6.1
      script: python3 -m cibuildwheel --output-dir wheelhouse

    # Build on windows
    - stage: build 
      name: Build Windows wheels
      os: windows
      language: shell
      install: python3 -m pip install cibuildwheel==1.6.1
      script: python3 -m cibuildwheel --output-dir wheelhouse
   
    # Deploy on linux
    # Also deploy source here. Otherwise source gets uploaded much earlier 
    # than the first binary, which is annoying.
    - stage: deploy
      name: Build and deploy Linux wheels & source
      os: linux
      language: python
      python: 3.7
      services: docker
      install: 
        - python3 -m pip install cibuildwheel==1.6.1
        - python3 -m pip install setuptools
      script: 
        - python3 setup.py sdist --formats=gztar
        - python3 -m cibuildwheel --output-dir wheelhouse
      after_success:
        - python3 -m pip install twine
        - python3 -m twine upload --skip-existing dist/*.tar.gz 
        - python3 -m twine upload --skip-existing wheelhouse/*.whl
    
    # Deploy on mac
    - stage: deploy
      name: Build and deploy macOS wheels
      os: osx
      osx_image: xcode11.2  
      language: shell       
      install: python3 -m pip install cibuildwheel==1.6.1
      script: python3 -m cibuildwheel --output-dir wheelhouse
      after_success:
        - python3 -m pip install twine
        - python3 -m twine upload --skip-existing wheelhouse/*.whl
        
    # Deploy on windows
    - stage: deploy
      name: Build and deploy Windows wheels
      os: windows
      language: shell
      install: python3 -m pip install cibuildwheel==1.6.1
      script: python3 -m cibuildwheel --output-dir wheelhouse
      after_success:
        - python3 -m pip install twine
        - python3 -m twine upload --skip-existing wheelhouse/*.whl
   